<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-10-31T21:45:47-04:00</updated><id>http://localhost:4000/</id><title type="html">Actual Fraqtual</title><subtitle>Probably not a potato</subtitle><author><name>Bren Briggs</name></author><entry><title type="html">Exposing local services to Minikube using SSH</title><link href="http://localhost:4000/tech/exposing-local-services-to-minikube/" rel="alternate" type="text/html" title="Exposing local services to Minikube using SSH" /><published>2017-06-21T00:00:00-04:00</published><updated>2017-06-21T00:00:00-04:00</updated><id>http://localhost:4000/tech/exposing-local-services-to-minikube</id><content type="html" xml:base="http://localhost:4000/tech/exposing-local-services-to-minikube/">&lt;p&gt;We already know we can port forward to reach services in Minikube, but what abot the other way around? What if a pod needs an external service on your laptop? There’s a &lt;a href=&quot;https://stackoverflow.com/questions/43530039/on-a-mac-what-ip-will-represent-my-laptop-from-within-a-minikube-cluster/43530279?noredirect=1#comment74114215_43530279&quot;&gt;pure Kubernetes way of doing it&lt;/a&gt;, but this is more of an interesting SSH trick that exposes how Kubernetes and Minikube work. Plus, it’s always fun to do tricks with SSH.&lt;/p&gt;

&lt;h3 id=&quot;the-setup&quot;&gt;The setup&lt;/h3&gt;

&lt;p&gt;Consider the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/vault-diagram-1.png&quot; alt=&quot;SSH forwarding 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vault is only accessible via the Elastic Load Balancer, which itself is only accessible to select security groups within our VPC. In order to issue Vault commands from my laptop, I have to use SSH local port forwarding. This sets up a tunnel over SSH that allows me to connect &lt;em&gt;through&lt;/em&gt; my SSH destination (Bastion in this case) which can connect to Vault.&lt;/p&gt;

&lt;p&gt;This is what the local forward looks like in my &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host Bastion
  Hostname mybastion.mysite.org
  LocalForward 55555 vault.mysite.org:443
  ControlMaster auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And just connecting to the server sets up the forwarder: &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh Bastion&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, we have a problem: Minikube needs to connect to Vault as well but is on an isolated network on my laptop. How do I expose Vault to Kubernetes inside this onion of networks? Let’s do it the hard way.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;

&lt;p&gt;Answer: MORE SSH!&lt;/p&gt;

&lt;p&gt;Since I’ve already forwarded the connection from somewhere off in Internetland, as far as Minikube is concerned, Vault may as well be living locally on my laptop at &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:8200&lt;/code&gt;. This works well for us, since the next step is just to cross that last gap between local laptop and kubernetes pod. After doing lots of digging around on Minikube port forwarding, I was disappointed that I couldn’t find much in the way of Github issues, StackOverflow questions, blog posts, etc. on Minikube reaching &lt;em&gt;out&lt;/em&gt;. There was plenty on forwarding &lt;em&gt;in&lt;/em&gt; to services on Minikube, however. Finally, I remembered that this SSH thing can go both ways: If I can forward my connection out to a destination, I can also invite a destination to connect inbound to me. In SSH parlance, that’s called a “remote forward.”&lt;/p&gt;

&lt;p&gt;The idea was to make one giant SSH pipeline: A remote forward from my laptop to the Minikube VM would allow connections from the pods to the forwarded port on Minikube VM to reach my laptop. Since my laptop is already forwarding the port all the way over to AWS, that would complete the SSH tunnel over multiple hops and allow pods on Minikube to reach Vault as though it was local.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/vault-diagram-2.png&quot; alt=&quot;SSH forwarding 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spoiler alert: It didn’t work right away.&lt;/p&gt;

&lt;p&gt;The normal syntax for an SSH remote forward looks like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -R remoteport:localaddress:localport host&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An actual example: &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -R 9999:127.0.0.1:8200 myserver&lt;/code&gt; would open a connection on port 9999 on the remote host, forwarding any traffic they send it to &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:8200&lt;/code&gt; on your local machine. I’ll stop for a second to allow you to imagine the really dangerous possibilities of a tool like SSH. Better yet, go read these awesome blog posts on the topic:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blather.michaelwlucas.com/archives/945&quot;&gt;How to lose your job with SSH, part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blather.michaelwlucas.com/archives/959&quot;&gt;How to lose your job with SSH, part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Back? Was that cool or what? Let’s move on…&lt;/p&gt;

&lt;p&gt;So we’re going to forward some port on Minikube VM over to our already-forwarded Vault connection. First, let’s figure out what the Minikube IP is:  &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube ip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Okay, that was easy. How do we get in now? A lucky google search turned up this SSH string, actually: &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -i ~/.minikube/machines/minikube/id_rsa docker@$(minikube ip)&lt;/code&gt; which Aaron Prindle (aprindle on the Kubernetes Slack) helpfully shortened to &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -i $(minikube ssh-key) docker@$(minikube ip)&lt;/code&gt;. That gets us into the Minikube container, but how do we forward the connection back out?&lt;/p&gt;

&lt;p&gt;We start with this (bear in mind that vault is forwarded to &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:55555&lt;/code&gt; on my laptop):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -i $(minikube ssh-key) docker@$(minikube ip) -R 8200:127.0.0.1:55555
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default this will only bind to localhost on the remote machine, so we need to expand it a bit:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -i $(minikube ssh-key) docker@$(minikube ip) -R 10.0.2.15:8200:127.0.0.1:55555
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here I have told SSH to bind to the eth0 interface of the minikube machine instead of localhost. Did it work?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh -i ~/.minikube/machines/minikube/id_rsa docker@$(minikube ip) -R 10.0.2.15:8200:localhost:55555
$ netstat -ant | grep 8200
tcp        0      0 127.0.0.1:8200          0.0.0.0:*               LISTEN
tcp        0      0 ::1:8200                :::*                    LISTEN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s a solid “no”. For some reason, even when explicitly told to use an IP other than localhost, it binds to localhost anyways. Turns out there was an issue opened on this: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=228064 and the answer was to update &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; to have the following line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GatewayPorts yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This apparently allows remote forwarding to bind to interfaces other than localhost.&lt;/p&gt;

&lt;p&gt;Now restart the ssh service:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl restart sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And reconnect:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -i $(minikube ssh-key) docker@$(minikube ip) -R 8200:localhost:55555
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now observe our listening interfaces:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ netstat -ant | grep 8200
tcp        0      0 0.0.0.0:8200            0.0.0.0:*               LISTEN
tcp        0      0 :::8200                 :::*                    LISTEN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are listening on all interfaces, ready to forward!&lt;/p&gt;

&lt;p&gt;Now in any of your services, you can reach out to the minikube IP on port 8200 to forward your traffic!&lt;/p&gt;

&lt;p&gt;Here’s what our service file looks like now:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# kubernetes-vault.yaml

apiVersion: v1
kind: Service
metadata:
  name: kubernetes-vault
  labels:
    run: kubernetes-vault
spec:
  clusterIP: None
  selector:
    run: kubernetes-vault
  # Kubernetes-Vault does not need to expose any ports through a headless service.
  # However, there's a Kubernetes bug where the pods won't be registered in the API,
  # so we need to use this hack. See kubernetes/kubernetes#32796
  ports:
    - name: port
      port: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-vault
data:
  kubernetes-vault.yml: |-
    vault:
      addr: http://10.0.2.15:8200  # Notice the IP address?
      token: aaaa-bbbb-cccc

    kubernetes:
      watchNamespace: ${KUBERNETES_NAMESPACE}
      serviceNamespace: ${KUBERNETES_NAMESPACE}
      service: kubernetes-vault

    prometheus:
      tls:
        vaultCertBackend: intermediate-ca
        vaultCertRole: kubernetes-vault
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kubernetes-vault
spec:
  replicas: 3
  template:
    metadata:
      labels:
        run: kubernetes-vault
    spec:
      containers:
      - name: kubernetes-vault
        image: boostport/kubernetes-vault
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: config-volume
          mountPath: /kubernetes-vault
      volumes:
        - name: config-volume
          configMap:
            name: kubernetes-vault
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Bren Briggs</name><email>briggs.brenton@gmail.com</email><uri>http://blog.fraq.io</uri></author><category term="kubernetes" /><category term="ops" /><category term="linux" /><category term="networking" /><summary type="html">Alternative title: The first time I used `ssh -R` for something that wasn't probably illegal</summary></entry><entry><title type="html">A practical and simple consul-template example</title><link href="http://localhost:4000/tech/consul-template/" rel="alternate" type="text/html" title="A practical and simple consul-template example" /><published>2017-06-03T00:00:00-04:00</published><updated>2017-06-03T00:00:00-04:00</updated><id>http://localhost:4000/tech/consul-template</id><content type="html" xml:base="http://localhost:4000/tech/consul-template/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this tutorial, we will be using Consul and consul-template to fetch configuration values for a simple application (a chatbot), then watch for updates to the configuration values and automatically restart the service if a value changes. Finally, we will wrap all of this in a Docker container.&lt;/p&gt;

&lt;p&gt;This tutorial also assumes you have a Consul cluster up and running. If you don’t have one, set one up a dev instance real fast and expose it on localhost like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --name=dev-consul -p 8500:8500 consul
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will expose a single-node consul cluster which other containers or local apps can use either by linking or addressing http://localhost:8500 from your host machine. &lt;em&gt;Do not use this in prod&lt;/em&gt;, this is just for a demonstration.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-even-is-consul-template&quot;&gt;What even is consul-template&lt;/h3&gt;

&lt;p&gt;First, a quick explanation of &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt; and &lt;a href=&quot;https://github.com/hashicorp/consul-template&quot;&gt;consul-template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Consul, in Hashicorp’s own words:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Consul has multiple components, but as a whole, it is a tool for discovering and configuring services in your infrastructure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and one key feature of Consul:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;KV Store: Applications can make use of Consul’s hierarchical key/value store for any number of purposes, including dynamic configuration, feature flagging, coordination, leader election, and more. The simple HTTP API makes it easy to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, you can set an arbitrary key to an arbitrary value (like &lt;code class=&quot;highlighter-rouge&quot;&gt;app/foo=&quot;bar&quot;&lt;/code&gt;) which applications can read back (ie &lt;code class=&quot;highlighter-rouge&quot;&gt;GET app/foo&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;bar&quot;&lt;/code&gt;) and use for configuration or other things. Hashicorp’s consul-template takes that key/value store and integrates it with Go’s templating language to allow users to build configuration files from a mix of static and dynamic data. It also provides an additional feature that watches keys rendered and “manages” a child process by attempting to restart it if a value changes. This is ideal for applications that consume config files and require restarts to pick up changes to those files.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;the-demo-application&quot;&gt;The demo application&lt;/h3&gt;

&lt;p&gt;As our demo application, we’ll use a &lt;a href=&quot;https://github.com/bbriggs/MissMoneyPenney&quot;&gt;Legobot&lt;/a&gt; I deployed to an IRC community I hang out in. If you want to follow along at home, go ahead and clone this down.&lt;/p&gt;

&lt;p&gt;There are a few files in root, but only 3 are important for this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chatbot.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config.ini&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wrap all this in a Python docker container (see &lt;code class=&quot;highlighter-rouge&quot;&gt;run.sh&lt;/code&gt;) but the workflow is the same: Install requirements in &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;, then start it with &lt;code class=&quot;highlighter-rouge&quot;&gt;python ./chatbot.py&lt;/code&gt;, which loads its configs from &lt;code class=&quot;highlighter-rouge&quot;&gt;config.ini&lt;/code&gt;. The goal here is to replace the hardcoded values in the config file with dynamically generated content from Consul.&lt;/p&gt;

&lt;p&gt;Here is the original &lt;code class=&quot;highlighter-rouge&quot;&gt;config.ini&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[irc1]
channels=#0x00sec,#rp
username=MissMoneyPenney
password=
host=irc.0x00sec.org
port=6697
ssl=True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s go ahead and replace these with values we have set in our Consul cluster (connecting to the UI at http://127.0.0.1:8500 in your browser is useful for this next part). Call it &lt;code class=&quot;highlighter-rouge&quot;&gt;config.ini.tmpl&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[irc1]
channels={{ key &quot;bots/mmp/channels&quot; }}
username={{key &quot;bots/mmp/username&quot; }}
password={{ keyOrDefault &quot;bots/mmp/password&quot; &quot;&quot; }}
host={{ key &quot;bots/mmp/host }}
port={{ keyOrDefault &quot;bots/mmp/port&quot; &quot;6697&quot; }}
ssl={{keyOrDefault &quot;bots/mmp/ssl&quot; &quot;True&quot; }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that I used a different function for some keys: &lt;code class=&quot;highlighter-rouge&quot;&gt;keyOrDefault&lt;/code&gt; does just what it sounds like: It looks for a key at the given location and adds the second argument if the key isn’t found. As you’re setting these keys in your Consul cluster, I recommend using values for your own desired IRC server and channel.&lt;/p&gt;

&lt;h3 id=&quot;running-the-app&quot;&gt;Running the app&lt;/h3&gt;

&lt;p&gt;I have published this container on &lt;a href=&quot;https://hub.docker.com/r/bbriggs/consul-template-demo/&quot;&gt;Docker Hub&lt;/a&gt; for your convenience, but I’m going to go ahead and show the Dockerfile with a breakdown of each section:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Use whatever base works for your app
FROM python:3

# Install consul-template
WORKDIR /tmp
RUN curl https://releases.hashicorp.com/consul-template/0.18.5/consul-template_0.18.5_linux_amd64.tgz -o consul-template.tgz
RUN gunzip consul-template.tgz
RUN tar -xf consul-template.tar
RUN mv consul-template /opt/consul-template
RUN rm -rf /tmp/consul-template*

# I use /usr/src for this app. Again, whatever works for you
WORKDIR /usr/src

# I did this wrong and ended up with multiple instances of the same bot in a channel, so this will gets its own paragraph
CMD pip install -r ./requirements.txt &amp;amp;&amp;amp; /opt/consul-template -config &quot;consul-template.hcl&quot; --template &quot;config.ini.tmpl:config.ini&quot; -exec &quot;python ./chatbot.py&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This Dockerfile assumes that you have a consul-template config called &lt;code class=&quot;highlighter-rouge&quot;&gt;consul-template.hcl&lt;/code&gt; in the working dir and you have a template called &lt;code class=&quot;highlighter-rouge&quot;&gt;config.ini.tmpl&lt;/code&gt; that consul-template will consume. Since we are linking the consul container, the consul-template config points to a hostname of &lt;code class=&quot;highlighter-rouge&quot;&gt;consul&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --name mmp --link dev-consul:consul -v `pwd`:/usr/src bbriggs/consul-template-demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check and see that the bot is running in your IRC channel, and follow the docker logs to watch it build:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker logs -f consul-template-demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;watching-exec-mode-magic&quot;&gt;Watching exec mode magic&lt;/h3&gt;

&lt;p&gt;Consul-template’s exec mode allows consul-template to watch for changes in keys it has rendered in the template while managing the a child process you tell it to start. In our case, we told it to start a python application.&lt;/p&gt;

&lt;p&gt;Now that the container is running and hopefully responding to commands in the IRC channel (try sending &lt;code class=&quot;highlighter-rouge&quot;&gt;!help&lt;/code&gt; in the channel to test), open up the Consul web UI, navigate to the key-value store, and change the username/nickname of the bot while watching the docker logs. If everything was done right, consul-template will send a SIGTERM to the &lt;code class=&quot;highlighter-rouge&quot;&gt;python chatbot.py&lt;/code&gt; process then start it again. As the python process starts again, it will consume the new config that consul-tempalte has generated. Ta-da! We now have an application that automatically updates on changes to consul values, even if it wasn’t exactly consul-friendly to begin with!&lt;/p&gt;

&lt;h3 id=&quot;a-small-caveat&quot;&gt;A small caveat&lt;/h3&gt;

&lt;p&gt;While it’s handy, you should also take note of how exec mode handles the process you give it: exec mode will attempt to send a SIGTERM to the process and then start it again. Remember when I said I accidentally ended up with lots of legobot instances running around? That’s actually what happened here. The original:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CMD /opt/consul-template --template &quot;config.ini.tmpl:config.ini&quot; -exec &quot;pip install -r ./requirements.txt &amp;amp;&amp;amp; python ./chatbot.py&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This meant that the sigterm was getting sent to pip install and not python. I tried this again by putting both into a bash script, but the same problem happened. Two solutions:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Trap the SIGTERM in bash, like Hashicorp suggests&lt;/li&gt;
  &lt;li&gt;Arrange your CMD or ENTRYPOINT so that non-persistent tasks (like a &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install&lt;/code&gt;) are ordered first and the SIGTERM gets sent to the right place.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Read more on this in the consul-template &lt;a href=&quot;https://github.com/hashicorp/consul-template#exec-mode&quot;&gt;documentation on exec mode&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;homework&quot;&gt;Homework&lt;/h3&gt;

&lt;p&gt;Experiment with Consul and consul-temaplte for yourself by applying this to other services such as Nginx. You can also play around with different ways of getting consul template to talk to consul, such as using the &lt;code class=&quot;highlighter-rouge&quot;&gt;--net=host&lt;/code&gt; option, linking containers, or port forwarding.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;</content><author><name>Bren Briggs</name><email>briggs.brenton@gmail.com</email><uri>http://blog.fraq.io</uri></author><category term="consul" /><category term="consul-template" /><category term="ops" /><category term="tutorial" /><summary type="html">A tutorial on using consul-template to automatically update configurations in your docker containers</summary></entry><entry><title type="html">Why bother?</title><link href="http://localhost:4000/tech/why-bother/" rel="alternate" type="text/html" title="Why bother?" /><published>2017-05-27T00:00:00-04:00</published><updated>2017-05-27T00:00:00-04:00</updated><id>http://localhost:4000/tech/why-bother</id><content type="html" xml:base="http://localhost:4000/tech/why-bother/">&lt;p&gt;“You can’t save the world in 24 hours, you know.” People in IRC can be stunningly pragmatic and striaghforward sometimes.&lt;/p&gt;

&lt;p&gt;“I know,” I said. “I don’t expect to.”&lt;/p&gt;

&lt;p&gt;“So why bother?”&lt;/p&gt;

&lt;p&gt;That, I think, is an excellent question. Why bother?&lt;/p&gt;

&lt;h3 id=&quot;why-bother&quot;&gt;Why bother?&lt;/h3&gt;

&lt;p&gt;If you spend enough time around me, you’ll learn a few things pretty quickly: I love to mentor people, I care about problems, and I love the idea of finding a hack for any problem. As a Christian, I believe that the Church is to be the hands and feet of Jesus here on Earth. Among so many other things, Jesus deeply loved people and was here to heal and to help. Therefore, I’m deeply invested in this whole idea of helping humanity. You may have your own reasons that have nothing to do with mine, but I’ve found that there are a lot of people who love humanity and want to see all of us in a better state, too.&lt;/p&gt;

&lt;p&gt;I think just about everyone agrees that we want to see people in a better place. We  want to end hunger, fight the ravages of disease, and give clean water to those who don’t have it. It’s also no surprise to anyone that there are a million approaches to this very large problem, as there should be. We have thousands upon thousands of charities all over the world to solve any number of ills in the world. Government programs abound. Good neighbors and global citizens are doing their part on their own. So if there are so many people organized around humanitarian causes, why bother with hackathons? We all know that this is a long game, so what good does a 24-hour event do?&lt;/p&gt;

&lt;h3 id=&quot;playing-the-long-game&quot;&gt;Playing the long game&lt;/h3&gt;

&lt;p&gt;We definitely can’t save the world in 24 hours, and when doing events I don’t expect to. In fact, I wouldn’t even say that “saving the world” is my goal. Many times we as a species can’t even agree on basic things, let alone what “saving the world” may look like, but we can almost always agree on what makes life better for people, so that’s what I pursue: making life better.&lt;/p&gt;

&lt;p&gt;Another thing you’ll hear me say if you spend any time with me is my advice to tackling massive problems: “We will eat this elephant a bite at a time.” The hackathon (or mass collaboration or whatever you want to call it) is just one way of taking a bite out of that giant elephant. I don’t expect that a single hackathon will be able to solve world hunger or end global warming. These are massive problems that will require humanity to collectively rally to find solutions, but that’s exactly what we’re doing. At these events, we are bringing together thinkers and planners, philanthropists, engineers, business people, and more, all in the interest of chipping away at the problem.&lt;/p&gt;

&lt;p&gt;On top of of that, I have noticed something else: hackathons give us a chance to find new solutions or adapt old ones in ways that that are relevant to us &lt;em&gt;locally&lt;/em&gt;. What does this mean? Reducing air pollution in Beijing looks very different than reducing air pollution in Bangalore or Los Angeles. Different causes and factors are involved, there are different cultures to account for, and wildly different availability of resources. A hackathon targeting air pollution that’s hosted in Los Angeles probably won’t have ideas that apply as readily in Beijing, but they know their own city quite well. And in that context, it’s 100% okay to think about your own town. It’s not selfish; it’s what you know best!&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;So in conclusion, I do this not because I expect to save the world in 24 hours, but because every event moves the needle just a litte further in a positive direction&lt;/em&gt;. Every idea, even the crappy ones, all of them contribute to solving these problems. We build things that matter.&lt;/p&gt;</content><author><name>Bren Briggs</name><email>briggs.brenton@gmail.com</email><uri>http://blog.fraq.io</uri></author><category term="hackathons" /><category term="opinion" /><category term="tech" /><summary type="html">“You can’t save the world in 24 hours, you know.” People in IRC can be stunningly pragmatic and striaghforward sometimes.</summary></entry><entry><title type="html">A weapon of mass instruction</title><link href="http://localhost:4000/meta/weapon-of-mass-instruction/" rel="alternate" type="text/html" title="A weapon of mass instruction" /><published>2017-05-20T00:00:00-04:00</published><updated>2017-05-20T00:00:00-04:00</updated><id>http://localhost:4000/meta/weapon-of-mass-instruction</id><content type="html" xml:base="http://localhost:4000/meta/weapon-of-mass-instruction/">&lt;p&gt;It’s been almost a year since I’ve written anything and almost as long since I took the blog down. Thanks to the people who messaged me freaking out thinking that the broken keybase proof for my old blog was some kind of canary and I was warning my friends. I’m flattered, actually.&lt;/p&gt;

&lt;p&gt;This iteration will be better, I promise. More frequent updates, guest posts, and hopefully a greater mix of content. After discussions with several friends close to me, I have resolved to use this blog as a “weapon of mass instruction” for sharing knowledge, welcoming newcomers to the trade, and inviting others to share what they’ve learned. I have a good feeling about this, and I hope you find it helpful too.&lt;/p&gt;</content><author><name>Bren Briggs</name><email>briggs.brenton@gmail.com</email><uri>http://blog.fraq.io</uri></author><category term="update" /><category term="meta" /><summary type="html">It’s been almost a year since I’ve written anything and almost as long since I took the blog down. Thanks to the people who messaged me freaking out thinking that the broken keybase proof for my old blog was some kind of canary and I was warning my friends. I’m flattered, actually.</summary></entry><entry><title type="html">No Chatbots, Plz</title><link href="http://localhost:4000/tech/no-chatbots/" rel="alternate" type="text/html" title="No Chatbots, Plz" /><published>2017-05-20T00:00:00-04:00</published><updated>2017-05-20T00:00:00-04:00</updated><id>http://localhost:4000/tech/no-chatbots</id><content type="html" xml:base="http://localhost:4000/tech/no-chatbots/">&lt;p&gt;&lt;em&gt;The following is the article version of a talk I gave at SxSW 2017 which you can find &lt;a href=&quot;https://soundcloud.com/officialsxsw/no-chatbots-plz-writing-targeted-challenge-statements-sxsw-2017&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;“You either die a hero or live long enough to see yourself develop a chatbot,” or so goes the joke on Twitter. For hackathons, this seems to be doubly true. Among other culprits, it seems that the same chatbot-powered solutions get presented at hackathons over and over with little variation. While it could be said that they are solving problems, a core criterion of any submission at such an event, they are also often far from novel at this point. Why does this matter? Well, a mass collaboration also seeks and values novelty in solutions. The problem here isn’t chatbots or Twitter services to monitor something or another awful IOT device begging to be found on Shodan. Truly novel applications of these things exist and are being created, but seeing them show up in groups at every single event is the symptom of a larger phenomenon–a problem.&lt;/p&gt;

&lt;h2 id=&quot;and-the-problem-is&quot;&gt;And the problem is?&lt;/h2&gt;

&lt;p&gt;However, chatbots are not the problem… Lazy ideas are. We might be tempted to stop there and berate developers for pitching these “lazy ideas” over the wall and declare the investigation finished and problem solved. Of course if that were the case, I wouldn’t be writing this article and you wouldn’t be reading it. There’s an even more fundamental root cause for these lazy ideas, and it goes by many names: writer’s block, the blank canvas problem, creative paralysis, etc. When faced with an overwhelming set of possibilities and a short timeframe in which to work, people often default to the safe solution instead of taking a creative risk. Given that hackathons are all about creative risks (or should be, but that’s another story), how do we fix this? We go from the top down by starting with the organizers by providing a little creative push in the form of slightly more specific challenge prompts or problem sets. Rather than asking our people to just go cure cancer, we give them a specific problem faced by researchers or organizations that has a broad range of possible approaches for solving.&lt;/p&gt;

&lt;p&gt;In order to provide this nudge, this ever so slight push, we have to first figure out where to push and how hard, which requires a bit of introspection. Things such as the goals of the hackathon, a theme, and whether the goals and theme align with the organization’s mission and purpose are great questions to ask at this point. Are you an organization that people care about? Or maybe even that people hate? Your reputation and exposure are worth considering and will affect your recruitment. Are you attempting to get a specific software product or solution out of the event? If so, you’re barking up the wrong tree and should reconsider your approach. In short, get a good grasp on your ideas about the event and what your organization does (and why!). If you’re anything like me and the number of organizations I’ve helped through this process, you’ll discover that you incorrectly assumed many things which will require some adjusting. Don’t fret. That’s why we go through this process.&lt;/p&gt;

&lt;h2 id=&quot;direction--boundaries&quot;&gt;Direction &amp;gt; Boundaries&lt;/h2&gt;

&lt;p&gt;After taking inventory of yourself, take a look at who will be coming. What sort of skill sets do you expect? What experience levels will be represented? Will it be a diverse group? The makeup of your attendees will affect the sorts of things you can reasonably expect them to make progress on in a given time frame. Take all this as input into deciding what challenges you want to lay before the talented and creative group you will be hosting. Our goal and purpose is to neutralize this creative paralysis, so using what we know about ourselves, our event, and our people, we give them a direction. Instead of saying to a musician, “Hey, write me a song” or to a developer, “You’re a programmer. Go code something!” we are communicating a problem and doing it in a way that creates empathy. Nobody wants to build on internal tooling that just makes you more money, but people certainly care about big problems that impact social issues. And once again, we scope appropriately. A problem set that’s too broad invites writer’s block while one that’s too narrow leaves people constrained. Remember: Your hackers prefer direction over boundaries. We don’t prescribe solutions, we describe problems in a relatable fashion, provide them the tools and data, then step out of their way. These are generally the sort of people that will climb a mountain simply because it’s there. Therefore, a properly communicated problem becomes the mountain that begs to be summitted. And because we are giving direction instead of setting boundaries, our participants work with us, not for us.&lt;/p&gt;

&lt;h2 id=&quot;a-parting-thought&quot;&gt;A parting thought&lt;/h2&gt;

&lt;p&gt;I’ve spoken with a number of people on this topic and every single one says, “Yes! I have this writer’s block problem with {topic}” It’s not a phenomenon unique to hackathon by any means. Furthermore, while the solution I proposed here, giving people a small nudge to kickstart the creativity, is done with hackathons in mind, it can certainly be generalized and applied to any number of situations. A final exhortation for those with that technical writer’s block: While creativity can feel fickle, just be patient, try to relax, set a distinct goal, and then just attack your problem. It might take a while to get into a creative mindset, just get to work anyways and ideas will flow. We are as much artists as engineers.&lt;/p&gt;</content><author><name>Bren Briggs</name><email>briggs.brenton@gmail.com</email><uri>http://blog.fraq.io</uri></author><category term="hackathons" /><category term="talks" /><summary type="html">The following is the article version of a talk I gave at SxSW 2017 which you can find here</summary></entry></feed>